const { DataTypes } = require('sequelize');
const sequelize = require('../config/db');

const User = sequelize.define('users', {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true},
    accountType: { type: DataTypes.ENUM('SAVINGS', 'CURRENT') },
    mobilenumber: { type: DataTypes.STRING},
    email: { type: DataTypes.STRING },
    aadharnumber: { type: DataTypes.STRING },
    fullname: { type: DataTypes.STRING },
    gender: { type: DataTypes.ENUM('MALE', 'FEMALE') },
    dob: { type: DataTypes.DATEONLY },
    fathername: { type: DataTypes.STRING },
    mothername: { type: DataTypes.STRING },
    careof: { type: DataTypes.STRING },
    street: { type: DataTypes.STRING },
    locality: { type: DataTypes.STRING },
    postoffice: { type: DataTypes.STRING },
    country: { type: DataTypes.STRING },
    state: { type: DataTypes.STRING },
    city: { type: DataTypes.STRING },
    pincode: { type: DataTypes.STRING },
    preferredbranch: { type: DataTypes.ENUM('NAGPUR','PUNE') },
    pannumber: { type: DataTypes.STRING },
    panholdername: { type: DataTypes.STRING },
    drivinglicensenumber: { type: DataTypes.STRING },
    drivinglicensedob: { type: DataTypes.DATEONLY },
    drivinglicensename: { type: DataTypes.STRING },
    commaddr_careof: { type: DataTypes.STRING },
    commaddr_street: { type: DataTypes.STRING },
    commaddr_locality: { type: DataTypes.STRING },
    commaddr_postoffice: { type: DataTypes.STRING },
    commaddr_city: { type: DataTypes.STRING },
    commaddr_state: { type: DataTypes.STRING },
    commaddr_country: { type: DataTypes.STRING },
    commaddr_pincode: { type: DataTypes.STRING },
    occupation: { type: DataTypes.STRING },
    religion: { type: DataTypes.ENUM('HINDU','MUSLIM','SIKH','JAIN','BUDDHIST', 'PARSI') },
    caste: { type: DataTypes.ENUM('OPEN','OBC','SC','ST') },
    annualincome: { type: DataTypes.ENUM('LESS THAN 100000','100001 TO 500000','500001 TO 1000000','MORE THAN 1000001') },
    sourceofincome: { type: DataTypes.ENUM('SALARY','BUSINESS','SELF EMPLOYEED','STUDENT','BUDDHIST', 'PARSI') },
    networth: { type: DataTypes.ENUM('LESS THAN 100000','100001 TO 500000','500001 TO 1000000','MORE THAN 1000001') },
    placeofbirth: { type: DataTypes.STRING },
    countryofbirth: { type: DataTypes.ENUM('INDIA', 'USA', 'CHINA', 'GERMANY', 'OTHER') },
    maritalstatus: { type: DataTypes.ENUM('SINGLE', 'MARRIED', 'DIVORCED') },
    nomineeadded: { type: DataTypes.BOOLEAN },
    nomineename: { type: DataTypes.STRING },
    nomineerelation: { type: DataTypes.ENUM('FATHER', 'MOTHER', 'SON', 'DAUGHTER', 'GUARDIAN') },
    nominee_careof: { type: DataTypes.STRING },
    nominee_street: { type: DataTypes.STRING },
    nominee_locality: { type: DataTypes.STRING },
    nominee_postoffice: { type: DataTypes.STRING },
    nominee_city: { type: DataTypes.STRING },
    nominee_state: { type: DataTypes.STRING },
    nominee_country: { type: DataTypes.STRING },
    nominee_pincode: { type: DataTypes.STRING },
    is_nominee_minor: { type: DataTypes.BOOLEAN },
    minor_dob: { type: DataTypes.DATEONLY },
    minor_guardian: { type: DataTypes.ENUM('SON','DAUGHTER') },
    minor_guardian_name: { type: DataTypes.STRING },
    nominee_name_on_passbook: { type: DataTypes.BOOLEAN },
    nominee_atm: { type: DataTypes.BOOLEAN },
    nominee_mobilebank: { type: DataTypes.BOOLEAN },
    nominee_smsbank: { type: DataTypes.BOOLEAN },
    nominee_chequebook: { type: DataTypes.BOOLEAN },
    createdAt: {type: DataTypes.DATE },
    updatedAt: {type: DataTypes.DATE }
});

module.exports = User